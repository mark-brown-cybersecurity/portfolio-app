{"version":3,"sources":["components/Landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Landing","style","width","margin","className","col","src","alt","href","rel","target","aria-hidden","Component","About","contact","Projects","Resume","Main","exact","path","component","LandingPage","Aboutme","Contact","App","height","position","fixedHeader","title","color","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"iPAwCeA,E,iLAnCd,OACD,yBAAKC,MAAQ,CAACC,MAAO,OAAQC,OAAQ,SACrC,kBAAC,OAAD,CAAMC,UAAU,gBAChB,kBAAC,OAAD,CAAMC,IAAK,IACX,yBACAC,IAAI,6DACJC,IAAI,YACJH,UAAU,eAGV,yBAAKA,UAAU,eACf,wDACA,6BACA,4EAEA,yBAAKA,UAAU,gBAEf,uBAAGI,KAAK,oBAAoBC,IAAI,sBAAsBC,OAAO,UAC7D,uBAAGN,UAAU,wBAAwBO,cAAY,UAEjD,uBAAGH,KAAK,oBAAoBC,IAAI,sBAAsBC,OAAO,UAC7D,uBAAGN,UAAU,sBAAsBO,cAAY,mB,GAvBzBC,aCSPC,E,iLAPd,OACD,6BAAK,6C,GAHeD,aCSLE,E,iLAPd,OACD,6BAAK,4C,GAHiBF,aCSPG,E,iLAPd,OACD,6BAAK,6C,GAHkBH,aCSRI,E,iLAPd,OACD,6BAAK,2C,GAHgBJ,aCkBLK,EAVH,kBACZ,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IAClC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWE,IAClC,kBAAC,IAAD,CAAOH,KAAK,WAAWC,UAAWG,IAClC,kBAAC,IAAD,CAAOJ,KAAK,YAAYC,UAAWL,IACnC,kBAAC,IAAD,CAAOI,KAAK,UAAUC,UAAWJ,M,OCkBlBQ,MA5Bf,WACE,OACI,yBAAKvB,MAAO,CAACwB,OAAQ,QAASC,SAAU,aACpC,kBAAC,SAAD,CAAQC,aAAW,GACf,kBAAC,SAAD,CAAQC,MAAO,8BAAM,0BAAM3B,MAAO,CAAE4B,MAAO,UAAtB,WAA+C,+CAChE,kBAAC,aAAD,KACI,kBAAC,IAAD,CAAMC,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGR,kBAAC,SAAD,CAAQF,MAAM,SACV,kBAAC,aAAD,KACA,kBAAC,IAAD,CAAME,GAAG,WAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,YACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAIJ,kBAAC,EAAD,MACA,kBAAC,UAAD,SCjBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCTNC,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEEC,SAASC,eAAe,SDoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,6EEnInBC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.e283f898.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Grid, Cell } from 'react-mdl';\n\nclass Landing extends Component{\nrender(){\n return(\n<div style= {{width: '100%', margin: 'auto'}}>\n<Grid className=\"landing-grid\">\n<Cell col={12}>\n<img\nsrc=\"https://myrealdomain.com/images/black-man-with-beard-1.png\"\nalt=\"markbrown\"\nclassName=\"avatar-img\"\n/>\n\n<div className=\"banner-text\">\n<h1>Full Stack Web Developer</h1>\n<hr/>\n<p> HTML / CSS | JavaScript | Bootstrap | React </p>\n\n<div className=\"social-links\">\n{/*Linkedin*/}\n<a href=\"http://google.com\" rel=\"noopener noreferrer\" target=\"_blank\">\n<i className=\"fa fa-linkedin-square\" aria-hidden=\"true\" /></a>\n{/*Github*/}\n<a href=\"http://google.com\" rel=\"noopener noreferrer\" target=\"_blank\">\n<i className=\"fa fa-github-square\" aria-hidden=\"true\" /></a>\n\n\n\n </div>\n</div>\n</Cell>\n</Grid>\n</div>\n\n )\n}\n}\n\nexport default Landing;\n","import React, {Component} from 'react';\n\n\nclass About extends Component{\nrender(){\n return(\n<div><h1>About Me</h1></div>\n\n )\n}\n}\n\nexport default About;\n","import React, {Component} from 'react';\n\n\nclass contact extends Component{\nrender(){\n return(\n<div><h1>contact</h1></div>\n\n )\n}\n}\n\nexport default contact;\n","import React, {Component} from 'react';\n\n\nclass Projects extends Component{\nrender(){\n return(\n<div><h1>Projects</h1></div>\n\n )\n}\n}\n\nexport default Projects;\n","import React, {Component} from 'react';\n\n\nclass Resume extends Component{\nrender(){\n return(\n<div><h1>Resume</h1></div>\n\n )\n}\n}\n\nexport default Resume;\n","import React from 'react';\nimport { Switch, Route} from 'react-router-dom';\n\nimport LandingPage from './Landingpage';\nimport Aboutme from './aboutme';\nimport Contact from './contact';\nimport Projects from './projects';\nimport Resume from './resume';\n\n\n\nconst Main = () => (\n <Switch>\n <Route exact path=\"/\" component={LandingPage} />\n<Route path=\"/aboutme\" component={Aboutme} />\n<Route path=\"/contact\" component={Contact} />\n<Route path=\"/projects\" component={Projects} />\n<Route path=\"/resume\" component={Resume} />\n </Switch>\n)\n\n export default Main;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Layout,Header,Navigation,Drawer,Content } from 'react-mdl';\nimport  Main from './components/main';\nimport { Link } from 'react-router-dom';\n\nfunction App() {\n  return (\n      <div style={{height: '300px', position: 'relative'}}>\n          <Layout fixedHeader>\n              <Header title={<span><span style={{ color: '#d000' }}>Area / </span><strong>The Title</strong></span>}>\n                  <Navigation>\n                      <Link to=\"/resume\">Resume</Link>\n                      <Link to=\"/aboutme\">About Me</Link>\n                      <Link to=\"/projects\">Projects</Link>\n                      <Link to=\"/contact\">Contact</Link>\n                  </Navigation>\n              </Header>\n              <Drawer title=\"Title\">\n                  <Navigation>\n                  <Link to=\"/resume\">Resume</Link>\n                  <Link to=\"/aboutme\">About Me</Link>\n                  <Link to=\"/projects\">Projects</Link>\n                  <Link to=\"/contact\">Contact</Link>\n                  </Navigation>\n              </Drawer>\n\n              <Main/>\n              <Content />\n          </Layout>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css'\nimport 'react-mdl/extra/material.js'\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n<BrowserRouter>\n    <App />\n</BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}